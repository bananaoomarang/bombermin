<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2018 Roku, Inc. All rights reserved. -->

<!-- @Public
    ComponentController (CC) is a node that responsible to make basic View interaction logic.
    From developer side, CC is used to show Views, view stacks for different use cases.
    There are 2 flags to handle close behaviour:
    allowCloseChannelOnLastView:bool=true and allowCloseLastViewOnBack:bool=true
    and 4 fields to operate with view stacks that makes available multi stack functionality :
    addStack:string, removeStack:string, selectStack:string, activeStack:string

    @Sample:
    ' in Scene context in channel
    m.top.ComponentController.callFunc("show", {
        view: View
        setFocus: true
    })
 -->
<component name="ComponentController" extends="Group" xsi:noNamespaceSchemaLocation="https://devtools.web.roku.com/schema/RokuSceneGraph.xsd">
    <interface>
        <!-- @Public -->
        <!--  
            holds the reference to view that is currently shown.
            Can be used for checking in onkeyEvent
         -->
        <field id="currentView" type="node" />

        <!-- @Public -->
        <!-- If developer set this flag channel closes when press back or set close=true on last view -->
        <field id="allowCloseChannelOnLastView" type="boolean" value="true" alwaysNotify="true" />

        <!-- @Public -->
        <!-- If developer set this flag the last View will be closed and developer can open another in wasClosed callback  -->
        <field id="allowCloseLastViewOnBack" type="boolean" value="true" alwaysNotify="true" />

        <!-- @Public -->
        <!--WRITE-ONLY. Adds new stack assuming given value as new stack ID and makes it active. 
            If there is already stack with such ID (e.g. "default" which always exists) it will become active and a new stack is not added.-->
        <field id="addStack" type="string" value="" alwaysNotify="true" />

        <!-- @Public -->
        <!--WRITE-ONLY. Accepts stack ID. 
            If there is a stack with such ID, it gets removed from ComponentController. 
            If active stack gets removed, ComponentController automatically switches to the previously active stack.-->
        <field id="removeStack" type="string" value="" alwaysNotify="true" />

        <!-- @Public -->
        <!--WRITE-ONLY. Accepts stack ID. 
            If there is a stack with such ID, ComponentController switches to it and makes it active. Otherwise does nothing.-->
        <field id="selectStack" type="string" value="" alwaysNotify="true" />

        <!-- @Public -->
        <!--READ-ONLY. ID of the active stack.-->
        <field id="activeStack" type="string" value=""/>

        <!-- @Public -->
        <!-- 
            Function that has to be called when you want to add view to view stack, and set focus to view
         -->
        <function name="show" />

        <!-- View manager is a reference to node that handles all View stack functionality -->
        <field id="ViewManager" type="node" />
    </interface>
    <script type="text/brightscript" uri="ComponentController.brs" />
    
    <children>
        <ButtonBar
            id="buttonBar" />
    </children>
</component>
